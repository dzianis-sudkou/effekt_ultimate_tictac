module src/Stupid

import tty
import io/console
import stream
import src/lib
import src/Render
import src/Generate



def playGame(): Unit = {
  with console

  def chooseSide(): Player / {WrongInput} = {
    println("Choose the side[X, O]:")
    val side = do readLine()
    side match {
      case "X" => Cross()
      case "O" => Nought()
      case _ =>
        do WrongInput("Invalid player type. Please type 'X' or 'O'!")
        chooseSide()
    }
  }

  def chooseSmallBoard(bigBoards: BigBoards): Int / {WrongInput} = {
    println("Choose the Small Board[1 - 9]:")
    val smallBoardNumber: String = do readLine()
    if (not(any(Numbers) {s => s == smallBoardNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseSmallBoard(bigBoards)
    }else {
      with on[WrongFormat].panic
      toInt(smallBoardNumber)
    }
  }

  def chooseCell(bigBoards: BigBoards, smallBoardNumber: Int): Int / {WrongInput} = {
    println("Choose the cell inside your Small Board")
    val cellNumber: String = do readLine()
    if (not(any(Numbers) {s => s == cellNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseCell(bigBoards, smallBoardNumber)
    }else {
      with on[WrongFormat].panic
      val cellNumberInt = toInt(cellNumber)

      if(checkOccupiedCell(bigBoards, smallBoardNumber, cellNumberInt)){
        do WrongInput("This Cell is Already occupied. Please type a number for a valid cell.")
        chooseCell(bigBoards, smallBoardNumber)
      }else{
        cellNumberInt
      }
    }
  }

  def gameLoop(player: Player): Unit / {WrongInput} = {
    var endGame: Bool = false
    var currentGameBoard: BigBoards = generateNewBigBoard()
    var currentSmallBoard: Int = 10
    var currentCell: Int = 10
    var currentPlayer: Player = player
    printGameScreen(currentGameBoard, player)

    if (currentPlayer is Cross()) {
      println("You're starting the game!\nChoose the starting Small Board.")
      currentSmallBoard = chooseSmallBoard(currentGameBoard)
      currentGameBoard = newActiveSmallBoard(currentGameBoard, currentSmallBoard)
      printGameScreen(currentGameBoard, player)
      ()
    } else {
      // println("The computer is starting the game!")
      println("You're starting the game!\nChoose the starting Small Board.")
      currentSmallBoard = chooseSmallBoard(currentGameBoard)
      currentGameBoard = newActiveSmallBoard(currentGameBoard, currentSmallBoard)
      printGameScreen(currentGameBoard, player)
    }
    while (not(endGame)){
      if (currentSmallBoard == 10) {
        currentSmallBoard = chooseSmallBoard(currentGameBoard)
        currentGameBoard = newActiveSmallBoard(currentGameBoard, currentSmallBoard)
      }

      // Before The Player's Move
      printGameScreen(currentGameBoard, currentPlayer)
      currentCell = chooseCell(currentGameBoard, currentSmallBoard)
      currentGameBoard = checkNewCell(currentGameBoard, currentSmallBoard, currentCell, currentPlayer)

      // After The Player's Move
      printGameScreen(currentGameBoard, currentPlayer)
      println("Excellent Move! Now Press the Enter to finish your turn.")
      do readLine()

      // Change The Current Player
      if(currentPlayer is Cross()) currentPlayer = Nought()
      else currentPlayer = Cross()

      // Change the Current Small Board
      if (checkAvailableSmallBoard(currentGameBoard, currentCell)){
        currentGameBoard = deactivateSmallBoard(currentGameBoard, currentSmallBoard)
        currentSmallBoard = currentCell
        currentGameBoard = newActiveSmallBoard(currentGameBoard, currentSmallBoard)
        currentCell = 10
      } else {
        currentGameBoard = deactivateSmallBoard(currentGameBoard, currentCell)
      }
      ()
    }
  }

  // MAIN SECTION

  clearScreen()

  println("Welcome to the ULTIMATE TIC-TAC-TOE!")
  println("Press enter to start the game.")
  do readLine()
  var play: Bool = true

  var player: Player = Nought()
  while (play) {


    try{

      // Choosing a player side
      player = chooseSide()
      
      // Starting the game
      gameLoop(player)
      

    } with WrongInput { msg =>
      println(msg)
      resume(())
    }
    ()
  }
  println("Goodbye!")
}


def main(): Unit = {
  playGame()
}