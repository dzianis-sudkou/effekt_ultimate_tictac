module src/Stupid

import tty
import io/console
import stream
import src/lib
import src/Render
import src/Generate



def playGame(): Unit = {
  with console

  def chooseSide(): Player / {WrongInput} = {
    println("Choose the side[X, O]:")
    val side = do readLine()
    side match {
      case "X" => "X"
      case "O" => "O"
      case _ =>
        do WrongInput("Invalid player type. Please type 'X' or 'O'!")
        chooseSide()
    }
  }

  def chooseSmallBoard(): Int / {WrongInput} = {
    println("Choose the Small Board[1 - 9]:")
    val sBNumber: String = do readLine()
    if (not(any(Numbers) {elem => elem == sBNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseSmallBoard()
    }else {
      with on[WrongFormat].panic
      val num: Int = toInt(sBNumber)
      num
    }
  }

  def gameLoop(): Unit / {WrongInput} = {
    var endGame: Bool = false
    var currentGameBoard: BigBoard = generateNewBigBoard()
    clearScreen()
    renderBoard(currentGameBoard)
    while (not(endGame)){
      var sB: Int = chooseSmallBoard()
      println("Your Small Board is " ++ sB.show)
      ()
    }
  }

  // MAIN SECTION

  clearScreen()

  println("Welcome to the ULTIMATE TIC-TAC-TOE!")
  println("Press enter to start the game.")
  do readLine()
  var play: Bool = true
  
  var currentGameBoard: BigBoard = generateNewBigBoard()

  var player: Player = ""
  while (play) {


    try{

      // Choosing a player side
      player = chooseSide()
      
      // Starting the game
      gameLoop()



    } with WrongInput { msg =>
      println(msg)
      println("\n")
      resume(())
    }
    ()
  }
  
  println("Goodbye: " ++ player)
}


def main(): Unit = {
  playGame()
}