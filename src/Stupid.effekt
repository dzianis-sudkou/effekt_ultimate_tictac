module src/Stupid

import tty
import io/console
import stream
import src/lib
import src/Render
import src/Generate



def playGame(): Unit = {

  def chooseSide(): Cell / {WrongInput} = {
    println("Choose the side[X, O]:")
    val side = consoleInput()
    side match {
      case "X" => Cross()
      case "O" => Nought()
      case _ =>
        do WrongInput("Invalid player type. Please type 'X' or 'O'!")
        chooseSide()
    }
  }

  def chooseSmallBoard(bigBoards: BigBoards): Int / {WrongInput} = {
    println("Choose the Small Board[1 - 9]:")
    val smallBoardNumber: String = consoleInput()

    if (not(any(Numbers) {s => s == smallBoardNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseSmallBoard(bigBoards)
    }
    else {
      with on[WrongFormat].panic
      val smallBoardNumber: Int = toInt(smallBoardNumber)
      if (checkAvailableSmallBoard(bigBoards, smallBoardNumber)){
        smallBoardNumber
      }else {
        do WrongInput("This Small Board is Already occupied. Please type a number for a valid Small Board.")
        chooseSmallBoard(bigBoards)
      }
    }
  }

  def chooseCell(bigBoards: BigBoards, smallBoardNumber: Int): Int / {WrongInput} = {
    println("Choose the cell inside your Small Board")
    val cellNumber: String = consoleInput()
    if (not(any(Numbers) {s => s == cellNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseCell(bigBoards, smallBoardNumber)
    }else {
      with on[WrongFormat].panic
      val cellNumberInt = toInt(cellNumber)

      if(checkAvailableCell(bigBoards, smallBoardNumber, cellNumberInt)){
        cellNumberInt
      }else{
        do WrongInput("This Cell is Already occupied. Please type a number for a valid cell.")
        chooseCell(bigBoards, smallBoardNumber)
      }
    }
  }

  def gameLoop(player: Cell): Unit / {WrongInput} = {
    var endGame: Bool = false

    var gameBoard: BigBoards = generateNewBigBoard()
    var currentSmallBoard: Int = 10
    var currentCell: Int = 10

    var currentPlayer: Cell = player

    printGameScreen(gameBoard, player)

    if (currentPlayer is Cross()) {
      println("You're starting the game!\nChoose the starting Small Board.")
      currentSmallBoard = chooseSmallBoard(gameBoard)
      gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
    } else {
      println("You're starting the game!\nChoose the starting Small Board.")
      currentSmallBoard = chooseSmallBoard(gameBoard)
      gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
    }

    // INNER GAME LOOP OF ONE GAME
    while (not(endGame)){
      if (currentSmallBoard == 10) {
        printGameScreen(gameBoard, currentPlayer)
        currentSmallBoard = chooseSmallBoard(gameBoard)
        gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
      }

      // Before The Player's Move
      printGameScreen(gameBoard, currentPlayer)
      currentCell = chooseCell(gameBoard, currentSmallBoard)
      gameBoard = checkNewCell(gameBoard, currentSmallBoard, currentCell, currentPlayer)

      // Check the winning situation
      with on[OutOfBounds].panic
      checkWinSituation(gameBoard.bigBoard.get(currentSmallBoard - 1), currentPlayer) match {
        case Win() => {
          println("\nYou won the Small Board!")
          consoleInput()
          gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, currentPlayer)
        }
        case Loose() => {
          println("\n It's a draw in the Small Board!")
          consoleInput()
          gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, Draw())
        }
        case _ => ()
      }
      // if (checkWinSituation(gameBoard.bigBoard.get(currentSmallBoard - 1), currentPlayer) is Win()){
      //   println("\nYou won the Small Board!")
      //   consoleInput()
      //   gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, currentPlayer)
      // }

      // After The Player's Move
      printGameScreen(gameBoard, currentPlayer)
      println("Excellent Move! Now Press the Enter to finish your turn.")

      consoleInput()

      // Change the Current Small Board
      if (checkAvailableSmallBoard(gameBoard, currentCell)){
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = currentCell
        gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
        currentCell = 10
      } else {
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = 10
      }

      // Verify if the game has been won
      if (checkWinSituation(gameBoard.smallCopy, currentPlayer) is Win()){
        println(playerString(currentPlayer) ++ ", You won the game!")
        consoleInput()
        endGame = true
      }

      checkWinSituation(gameBoard.smallCopy, currentPlayer) match {
        case Win() => {
          println(playerString(currentPlayer) ++ ", You won the game!")
          consoleInput()
          endGame = true
        }
        case Loose() => {
          println(playerString(currentPlayer) ++ ", You lost the game!")
          consoleInput()
          endGame = true
        }
        case _ => ()
      }
      // Change The Current Player
      if(currentPlayer is Cross()) currentPlayer = Nought()
      else currentPlayer = Cross()
      ()
    }
  }

  // MAIN SECTION

  clearScreen()

  // Greeting Message
  println("Welcome to the ULTIMATE TIC-TAC-TOE!")
  println("Press enter to start the game.")

  consoleInput()
  
  var play: Bool = true

  var player: Cell = Nought()
  while (play) {

    try{
      // Choosing a player side
      player = chooseSide()

      // Starting the game
      gameLoop(player)

    } with WrongInput { msg =>
      println(msg)
      resume(())
    }
    ()
  }
  println("Goodbye!")
}


def main(): Unit = {
  playGame()
}