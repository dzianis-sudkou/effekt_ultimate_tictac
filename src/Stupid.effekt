module src/Stupid

import tty
import io/console
import stream
import src/lib

type Row = List[String]
type SmallBoard = List[List[String]]
type BigBoard = List[List[SmallBoard]]

type Player = String

val row1: Row = fill(3, "·")
val row2: Row = fill(3, "·")
val row3: Row = fill(3, "⚬")

val smallBoard: SmallBoard = [
  row1,
  row2,
  row3
  ]

val bigBoard: BigBoard = [
      [smallBoard, smallBoard, smallBoard],
      [smallBoard, smallBoard, smallBoard],
      [smallBoard, smallBoard, smallBoard]
  ]

def renderRow(l: Row): Unit = {
  val rowString: String = l.foldLeft("") { (acc, elem) =>
    if (acc == "") {
      elem ++ " "
    }else { 
      if (elem == "\n") {
        acc ++ elem
      }else {
        acc ++ elem ++ " " 
      }
    }
  }
  println(rowString)
}

def createNewBigBoard(): BigBoard = {
  val row1: Row = fill(3, "⚬")
  val smallBoard: SmallBoard = fill(3, row1)
  val bigBoard: BigBoard = fill(3,fill(3, smallBoard))
  bigBoard
}

def clearScreen(): Unit = {
  println("\u001b[2J") // clear the screen
  println("\u001b[H") // move the cursor to the top left corner
}

def renderBoard(board: BigBoard): Unit = {
  renderSeparator()
  board.foreach {elem =>  // elem is a List[SmallBoard]
    val bigRow: List[String] = createUnifiedRow(elem)
    renderRow(bigRow)
    renderSeparator()
    ()
  }
  ()
}

def renderSeparator(): Unit = {
  var separator: List[String] = fill(11, "—")
  separator = separator.replace(3, "+")
  separator = separator.replace(7, "+")
  renderRow(separator)
  ()
}

def createUnifiedRow(boardRow: List[SmallBoard]): List[String] = {
  with on[OutOfBounds].panic // disable all the error messages
  var unifiedRow: List[List[String]] = []
  var counterSmallBoard: Int = 0
  var counterRow: Int = 0
  while (counterRow < 3) {
    val smallBoard: SmallBoard = boardRow.get(counterSmallBoard)
    unifiedRow = unifiedRow.insert(unifiedRow.size(), smallBoard.get(counterRow)) // insert the row of the small board
    if (counterSmallBoard == 2) {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), ["\n"]) // new line symbol
      counterSmallBoard = 0
      counterRow = counterRow + 1
    } else {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), ["|"]) // insert the separator
      counterSmallBoard = counterSmallBoard + 1
    }
    ()
  }
  var resultRow: List[String] = unifiedRow.join()
  resultRow = resultRow.deleteAt(resultRow.size() - 1) // remove the last new line symbol
  resultRow
}


def playGame(): Unit = {
  println("Welcome to the ULTIMATE TIC-TAC-TOE!")
  println("Press enter to start the game.")
  var player: Player = ""
  with console
  do readLine()
  var currentGameBoard: BigBoard = createNewBigBoard()
  renderBoard(currentGameBoard)
  var play = true
  def chooseSide(): Unit / {WrongInput} = {

    println("Choose the side[X, O]:")
    val side = do readLine()
    side match {
      case "X" => player = "X"
      case "O" => player = "O"
      case _ =>
        do WrongInput("Invalid input. Please type 'X' or 'O'!")
        chooseSide()
    }
    ()
  }

  def gameLoop(): Unit / {WrongInput} = {
    var currentGameBoard: BigBoard = createNewBigBoard()
    while (play) {
      clearScreen()
      renderBoard(currentGameBoard)
      do readLine()
    ()
  }
    ()
  }
  def handleInput(): Bool/{WrongInput} = {
    println("ULTIMATE TIC-TAC-TOE\n\nStart the game?\n\n(y = yes, q = quit):")
    with console
    val input = do readLine()
      input match {
        case "y" => true
        case "q" => false
        case _ =>
          do WrongInput("Invalid input. Please type 'y' to play again or 'q' to quit.")
          handleInput()
      }
  }
  println("Goodbye!")
}
def main(): Unit = {
  playGame()
}