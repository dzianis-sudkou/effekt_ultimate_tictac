module src/Render

import src/lib
import tty
import io/console
import stream

def renderBoard(board: BigBoard): Unit = {
  with Formatted::formatting
  var counter = 0
  renderSeparator()
  while (counter < 3) {
    with on[OutOfBounds].panic
    var smallBoards: List[SmallBoard] = empty()
    smallBoards = smallBoards.insert(smallBoards.size(), board.get(counter * 3))
    smallBoards = smallBoards.insert(smallBoards.size(), board.get(counter * 3 + 1))
    smallBoards = smallBoards.insert(smallBoards.size(), board.get(counter * 3 + 2))
    counter = counter + 1
    val bigRow: List[Cell] = createUnifiedRow(smallBoards)
    renderRow(bigRow)
    renderSeparator()
  }
  ()
}

def renderRow(row: List[Cell]): Unit = {
  with Formatted::formatting
  var newRow: String = ""
  row.foreach {c =>
    c match {
      case Empty() => newRow = newRow ++ "·".yellow ++ " "
      case Draw() => newRow = newRow ++ "—".yellow ++ " "
      case Active() => newRow = newRow ++ "◦".cyan ++ " "
      case Cross() => newRow = newRow ++ "X".red ++ " "
      case Nought() => newRow = newRow ++ "O".green ++ " "
      case NewLine() => newRow = newRow ++ "\n"
      case Separator() => newRow = newRow ++ "|".magenta ++ " "
    }
  }
  println(newRow)
}

def renderSeparator(): Unit = {
  with Formatted::formatting
  var separator: List[String] = fill(11, "—".magenta)
  separator = separator.replace(3, "+".magenta)
  separator = separator.replace(7, "+".magenta)
  println(separator.foldLeft("") { (acc, elem) => acc ++ elem ++ " "})
}

def createUnifiedRow(boardRow: List[SmallBoard]): List[Cell] = {
  var boardsRow: List[SmallBoard] = boardRow

  var unifiedRow: List[List[Cell]] = empty()

  var counterSmallBoard: Int = 0
  var counterRow: Int = 0

  while (counterRow < 3) {
    with on[OutOfBounds].panic // disable all the error messages
    var smallBoard: SmallBoard = boardsRow.get(counterSmallBoard) // Taking the small board
    unifiedRow = unifiedRow.insert(unifiedRow.size(), smallBoard.take(3)) // insert the row of the small board
    smallBoard = smallBoard.drop(3) // remove the row from the small board
    boardsRow = boardsRow.replace(counterSmallBoard, smallBoard) // replace the small board with the new one
    if (counterSmallBoard == 2) {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), [NewLine()]) // new line symbol
      counterSmallBoard = 0
      counterRow = counterRow + 1
    } else {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), [Separator()]) // insert the separator
      counterSmallBoard = counterSmallBoard + 1
    }
    ()
  }
  var resultRow: List[Cell] = unifiedRow.join()
  resultRow = resultRow.deleteAt(resultRow.size() - 1) // remove the last new line
  resultRow
}

def printGameScreen(gameBoard: GameBoard, player: Cell): Unit = {
  clearScreen()
  println("You're playing as " ++ playerString(player))
  newLine()
  
  renderBoard(gameBoard.bigBoard)
  newLine()
}

def printWelcomeScreen(): Unit = {
  clearScreen()
  with Formatted::formatting
  val welcomeScreen: String = """
   __  ____  ____________  ______  ____________   ________________   _________   ______   __________  ______
  / / / / / /_  __/  _/  |/  /   |/_  __/ ____/  /_  __/  _/ ____/  /_  __/   | / ____/  /_  __/ __ \/ ____/
 / / / / /   / /  / // /|_/ / /| | / / / __/      / /  / // /  ______/ / / /| |/ /  ______/ / / / / / __/   
/ /_/ / /___/ / _/ // /  / / ___ |/ / / /___     / / _/ // /__/_____/ / / ___ / /__/_____/ / / /_/ / /___   
\____/_____/_/ /___/_/  /_/_/  |_/_/ /_____/    /_/ /___/\____/    /_/ /_/  |_\____/    /_/  \____/_____/   
                                          
                                          [enter]
""".green
  println("\u001b[10H") // Move the cursor to the middle
  println(welcomeScreen)
  consoleInput()
  ()
}

def printExitScreen(): Unit = {
  clearScreen()
  with Formatted::formatting
  val exitScreen: String = """
     ______                ____               __
    / ____/___  ____  ____/ / /_  __  _____  / /
   / / __/ __ \/ __ \/ __  / __ \/ / / / _ \/ / 
  / /_/ / /_/ / /_/ / /_/ / /_/ / /_/ /  __/_/  
  \____/\____/\____/\__,_/_.___/\__, /\___(_)   
                               /____/             

                [enter]
    """.green
  println("\u001b[10H") // Move the cursor to the middle
  println(exitScreen)
  consoleInput()
  ()
}

def printRules(): Unit = {
  clearScreen()
  val rules: String = """
    Ultimate Tic-Tac-Toe Rules:

    1. The Board: The game is played on a large Tic-Tac-Toe board
    composed of 9 smaller Tic-Tac-Toe boards.

    2. Winning a Small Board: Within each small board, standard Tic-Tac-Toe rules apply.
    The first player to get three in a row (horizontally, vertically, or diagonally) wins that small board.

    3. Winning the Big Board: To win the entire game, a player must win three small boards in a row on the large board.

    4. Where to Play: Your move on the big board is determined by your opponent's previous move. 
    The small board you must play in next corresponds to the cell number within a small board where your opponent just played.
    Example: If your opponent plays in cell '7' of a small board, your next move must be in the small board numbered '7' on the big board.

    5. Sent to a Won Board: If your opponent's move sends you to a small board that has already been won (or is a draw), 
    you can play in any of the other 8 small boards.

    [Enter]
  """
  println(rules)
  consoleInput()
  clearScreen()
}