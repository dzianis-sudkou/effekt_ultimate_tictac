module src/Render

import src/lib
import tty
import io/console
import stream

def renderBoard(board: BigBoard): Unit = {
  renderSeparator()
  board.foreach {elem =>  // elem is a List[SmallBoard]
    val bigRow: Row = createUnifiedRow(elem)
    renderRow(bigRow)
    renderSeparator()
    ()
  }
  ()
}

def renderRow(l: Row): Unit = {
  val rowString: String = l.foldLeft("") { (acc, elem) =>
    if (acc == "") {
      elem ++ " "
    }else { 
      if (elem == "\n") {
        acc ++ elem
      }else {
        acc ++ elem ++ " " 
      }
    }
  }
  println(rowString)
}

def renderSeparator(): Unit = {
  var separator: List[String] = fill(11, "â€”")
  separator = separator.replace(3, "+")
  separator = separator.replace(7, "+")
  renderRow(separator)
  ()
}

def createUnifiedRow(boardRow: List[SmallBoard]): List[String] = {
  with on[OutOfBounds].panic // disable all the error messages
  var unifiedRow: List[List[String]] = []
  var counterSmallBoard: Int = 0
  var counterRow: Int = 0
  while (counterRow < 3) {
    val smallBoard: SmallBoard = boardRow.get(counterSmallBoard)
    unifiedRow = unifiedRow.insert(unifiedRow.size(), smallBoard.get(counterRow)) // insert the row of the small board
    if (counterSmallBoard == 2) {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), ["\n"]) // new line symbol
      counterSmallBoard = 0
      counterRow = counterRow + 1
    } else {
      unifiedRow = unifiedRow.insert(unifiedRow.size(), ["|"]) // insert the separator
      counterSmallBoard = counterSmallBoard + 1
    }
    ()
  }
  var resultRow: List[String] = unifiedRow.join()
  resultRow = resultRow.deleteAt(resultRow.size() - 1) // remove the last new line symbol
  resultRow
}