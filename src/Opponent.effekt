module src/Opponent

import src/lib
import src/Generate


/*
 * Checks if it's a computer turn right now
 * Input : currentPlayer: Cell, computer: Cell
 * Output : Bool
 */
def isComputerTurn(currentPlayer: Cell, computer: Cell): Bool =
  (currentPlayer, computer) match {
    case (Cross(), Cross()) => true
    case (Nought(), Nought()) => true
    case _ => false
  }


/*
 * Computer Play Logic
 * Input : smallBoard: SmallBoard, computer: Cell
 * Output : Int
 */
def computerPlay(smallBoard: SmallBoard, computer: Cell): Int = {
  with on[OutOfBounds].panic
  println("It's computer playing.")

  var newSmallBoard: SmallBoard = smallBoard
  var player: Cell = Cross()
  if (computer is Cross()) player = Nought()
  var counter: Int = 0
  var resultCell: Int = 10

  // Check for a winning move
  while (counter < 9 && resultCell == 10){
    if (checkAvailableCell(newSmallBoard, counter)){
      newSmallBoard = newSmallBoard.replace(counter, computer) // Simulate Computer's move
      if (checkWinSituation(newSmallBoard, computer).state is Win()){
        resultCell = counter
      }else{
        newSmallBoard = newSmallBoard.replace(counter, Active())
      }
    }
    counter = counter + 1
  }

  counter = 0
  // Check for a blocking move
  while (counter < 9 && resultCell == 10){
    if (checkAvailableCell(newSmallBoard, counter)){
      newSmallBoard = newSmallBoard.replace(counter, player) // // Simulate Player's move
      if (checkWinSituation(newSmallBoard, player).state is Win()){
        resultCell = counter
      }else{
        newSmallBoard = newSmallBoard.replace(counter, Active())
      }
    }
    counter = counter + 1
  }

  // Choose center if available (strong strategically)
  if ((checkAvailableCell(newSmallBoard, 4)) && resultCell == 10){
    resultCell = 4
  }

  // Choose a corner if available
  [0,2,6,8].foreach { cellPos =>
  if ((checkAvailableCell(newSmallBoard, cellPos)) && resultCell == 10){
      resultCell = cellPos
    }
  }

  // Choose any available side
  [1, 3, 5, 7].foreach { cellPos =>
  if ((checkAvailableCell(newSmallBoard, cellPos)) && resultCell == 10){
      resultCell = cellPos
    }
  }
  resultCell
}