module src/Generate

import tty
import io/console
import stream
import src/lib

/**
 * Generates a new BigBoard
 * Input : None
 * Output : GameBoard
 */
def generateNewBigBoard(): GameBoard = {
  val smallBoard: SmallBoard = fill(9, Empty())
  val bigBoard: BigBoard = fill(9, smallBoard)
  GameBoard(bigBoard, smallBoard)
}


// Makes a new Small Board Active()
def newActiveSmallBoard(gameBoard: GameBoard, smallBoardNumber: Int): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber )


  // Making Active Cell in the Small Copy of the Big Board
  newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, Active())
  
  // Replacing all the Empty() cells with Active()
  var counter: Int = 0
  newSmallBoard.foreach {cell =>
    cell match {
      case Empty() => newSmallBoard = newSmallBoard.replace(counter, Active())
      case _ => ()
    }
    counter = counter + 1
    ()
  }

  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}

def deactivateSmallBoard(gameBoard: GameBoard, smallBoardNumber: Int): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy
  
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber)
  var counter: Int = 0
  // newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, Empty())

  newSmallBoard.foreach {cell =>
    cell match {
      case Active() => newSmallBoard = newSmallBoard.replace(counter, Empty())
      case _ => ()
    }
    counter = counter + 1
    ()
  }
  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}

def checkNewCell(gameBoard: GameBoard, smallBoardNumber: Int, cellNumber: Int, player: Cell): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber)
  newSmallBoard = newSmallBoard.replace(cellNumber, player)
  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, gameBoard.smallCopy)
}

/*
 * Returns true if the cell is  free.
 * False Otherwise
 * Input : GameBoard, SmallBoardNumber, Cell Number
 * Output : Boolean
 */
def checkAvailableCell(smallBoard: SmallBoard, cellNumber: Int): Bool = {
  with on[OutOfBounds].panic

  val cellType: Cell = smallBoard.get(cellNumber)
    cellType match {
    case Empty() => true
    case Active() => true
    case _ => false
  }
}

/*
 * Returns true if Current Player has won in this Small Board.
 * False Otherwise
 * Input : SmallBoardNumber, player
 * Output : Boolean
 */
def checkWinSituation(smallBoard: SmallBoard, player: Cell): WinBoard = {
  var cr: Bool = true
  if (player is Cross()) cr = true else cr = false
  var checkedCells: List[Int] = empty()
  var counter: Int = 0
  var win: WinBoard = Nope()
  
  smallBoard.foreach {cell =>
    cell match {
      case Cross() => if (cr) checkedCells = checkedCells.insert(checkedCells.size(), counter)
      case Nought() => if (not(cr)) checkedCells = checkedCells.insert(checkedCells.size(), counter)
      case _ => ()
    }
    counter = counter + 1
  }
  counter = 0
  // Here we are checking if all three elements from the win combination are in the
  // Checked cells list
  winCombinations.foreach { combination =>
    combination.foreach { el =>
      if(any(checkedCells) {cell => cell == el}) counter = counter + 1
    }
    if (counter == 3) win = Win()
    else counter = 0
  }

  // Check if there's a draw in board
  counter = 0
  if (win is Nope()){
      smallBoard.foreach {cell =>
      cell match {
        case Cross() => counter = counter + 1
        case Nought() => counter = counter + 1
        case _ => ()
      }
      if (counter == 9) {
        win = Lose()
      }
    }
  }
  win
}

def fillWinningGameBoard(gameBoard: GameBoard, smallBoardNumber: Int, player: Cell): GameBoard = {
  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy

  newBigBoard = newBigBoard.replace(smallBoardNumber, fill(9, player))
  newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, player)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}

def computerPlay(smallBoard: SmallBoard, computer: Cell): Int = {
  with on[OutOfBounds].panic
  println("It's computer playing.")

  var newSmallBoard: SmallBoard = smallBoard
  var player: Cell = Cross()
  if (computer is Cross()) player = Nought()
  var counter: Int = 0
  var resultCell: Int = 10

  // Check for a winning move
  while (counter < 9 && resultCell == 10){
    if (checkAvailableCell(newSmallBoard, counter)){
      newSmallBoard = newSmallBoard.replace(counter, computer) // Simulate Computer's move
      if (checkWinSituation(newSmallBoard, computer) is Win()){
        resultCell = counter
      }else{
        newSmallBoard = newSmallBoard.replace(counter, Active())
      }
    }
    counter = counter + 1
  }

  counter = 0
  // Check for a blocking move
  while (counter < 9 && resultCell == 10){
    if (checkAvailableCell(newSmallBoard, counter)){
      newSmallBoard = newSmallBoard.replace(counter, player) // // Simulate Player's move
      if (checkWinSituation(newSmallBoard, player) is Win()){
        resultCell = counter
      }else{
        newSmallBoard = newSmallBoard.replace(counter, Active())
      }
    }
    counter = counter + 1
  }

  counter = 0
  // Choose center if available (strong strategically)
  if ((checkAvailableCell(newSmallBoard, 4)) && resultCell == 10){
    resultCell = 4
  }

  counter = 0
  // Choose a corner if available
  [0,2,6,8].foreach { cellPos =>
  if ((checkAvailableCell(newSmallBoard, cellPos)) && resultCell == 10){
      resultCell = cellPos
    }
  }

  // Choose any available side
  [1, 3, 5, 7].foreach { cellPos =>
  if ((checkAvailableCell(newSmallBoard, cellPos)) && resultCell == 10){
      resultCell = cellPos
    }
  }
  resultCell
}

def isComputerTurn(currentPlayer: Cell, computer: Cell): Bool =
  (currentPlayer, computer) match {
    case (Cross(), Cross()) => true
    case (Nought(), Nought()) => true
    case _ => false
  }