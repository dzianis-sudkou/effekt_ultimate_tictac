module src/generate

import tty
import io/console
import stream
import src/lib


/**
 * Generates a new BigBoard
 * Input : None
 * Output : GameBoard
 */
def generateNewBigBoard(): GameBoard = {
  val smallBoard: SmallBoard = fill(9, Empty())
  val bigBoard: BigBoard = fill(9, smallBoard)
  GameBoard(bigBoard, smallBoard)
}


/**
 * Makes a new Small Board Active()
 * Input : gameBoard: GameBoard, smallBoardNumber: Int
 * Output : updated GameBoard
 */
def activateSmallBoard(gameBoard: GameBoard, smallBoardNumber: Int): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber )


  // Making Active Cell in the Small Copy of the Big Board
  newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, Active())
  
  // Replacing all the Empty() cells with Active()
  var counter: Int = 0
  newSmallBoard.foreach {cell =>
    cell match {
      case Empty() => newSmallBoard = newSmallBoard.replace(counter, Active())
      case _ => ()
    }
    counter = counter + 1
  }

  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}


/**
 * Deactivate the Small Board
 * Input : gameBoard: GameBoard, smallBoardNumber: Int
 * Output : updated GameBoard
 */
def deactivateSmallBoard(gameBoard: GameBoard, smallBoardNumber: Int): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy
  
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber)
  var counter: Int = 0
  if (newGameBoardSmallCopy.get(smallBoardNumber) is Active()) newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, Empty())

  newSmallBoard.foreach {cell =>
    cell match {
      case Active() => newSmallBoard = newSmallBoard.replace(counter, Empty())
      case _ => ()
    }
    counter = counter + 1
  }
  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}


/**
 * Checks the cell with a chosen player
 * Input : gameBoard: GameBoard, smallBoardNumber: Int, cellNumber: Int, player: Cell
 * Output : updated GameBoard
 */
def checkNewCell(gameBoard: GameBoard, smallBoardNumber: Int, cellNumber: Int, player: Cell): GameBoard = {
  with on[OutOfBounds].panic

  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newSmallBoard: SmallBoard = newBigBoard.get(smallBoardNumber)
  newSmallBoard = newSmallBoard.replace(cellNumber, player)
  newBigBoard = newBigBoard.replace(smallBoardNumber, newSmallBoard)
  GameBoard(newBigBoard, gameBoard.smallCopy)
}


/*
 * Returns true if the cell is  free, false otherwise
 * Input : smallBoard: SmallBoard, cellNumber: Int
 * Output : Bool
 */
def checkAvailableCell(smallBoard: SmallBoard, cellNumber: Int): Bool = {
  with on[OutOfBounds].panic

  val cellType: Cell = smallBoard.get(cellNumber)
    cellType match {
    case Empty() => true
    case Active() => true
    case _ => false
  }
}


/*
 * Returns true if Current Player has won in this Small Board, false otherwise
 * Input : smallBoard: SmallBoard, player: Cell
 * Output : Finish
 */
def checkWinSituation(smallBoard: SmallBoard, player: Cell): Finish = {
  var cr: Bool = true
  if (player is Cross()) cr = true else cr = false
  var checkedCells: List[Int] = empty()
  var counter: Int = 0
  var isFinished: Bool = false
  var finishState: FinishState = Lose()
  smallBoard.foreach {cell =>
    cell match {
      case Cross() => if (cr) checkedCells = checkedCells.insert(checkedCells.size(), counter)
      case Nought() => if (not(cr)) checkedCells = checkedCells.insert(checkedCells.size(), counter)
      case _ => ()
    }
    counter = counter + 1
  }
  counter = 0
  // Here we are checking if all three elements from the win combination are in the
  // Checked cells list
  winCombinations.foreach { combination =>
    combination.foreach { el =>
      if(any(checkedCells) {cell => cell == el}) counter = counter + 1
    }
    if (counter == 3){isFinished = true; finishState = Win()}
    else counter = 0
  }

  // Check if there's a draw in board
  counter = 0
  if (isFinished is false){
      smallBoard.foreach {cell =>
      cell match {
        case Cross() => counter = counter + 1
        case Nought() => counter = counter + 1
        case _ => ()
      }
      if (counter == 9) {isFinished = true; finishState = Lose()}
    }
  }
  Finish(isFinished, finishState, player)
}


/*
 * Fills a Small Board with a chosen player.
 * Input : gameBoard: GameBoard, smallBoardNumber: Int, player: Cell
 * Output : Updated GameBoard
 */
def fillWinningGameBoard(gameBoard: GameBoard, smallBoardNumber: Int, player: Cell): GameBoard = {
  var newBigBoard: BigBoard = gameBoard.bigBoard
  var newGameBoardSmallCopy: SmallBoard = gameBoard.smallCopy

  newBigBoard = newBigBoard.replace(smallBoardNumber, fill(9, player))
  newGameBoardSmallCopy = newGameBoardSmallCopy.replace(smallBoardNumber, player)
  GameBoard(newBigBoard, newGameBoardSmallCopy)
}