module src/test

import test
import src/lib
import src/Generate
import src/Opponent

// Test Helpers
def createBoardWithMoves(moves: List[Cell]): SmallBoard = {
  var board: SmallBoard = empty()
  moves.foreach { move => board = board.insert(board.size(), move) }
  board
}

def createBoardWithMovesAtPositions(positions: List[Int], player: Cell): SmallBoard = {
  var board: SmallBoard = fill(9, Empty())
  positions.foreach { pos => board = board.replace(pos, player) }
  board
}

def main() = mainSuite("Ultimate Tic-Tac-Toe Tests") {
  with on[OutOfBounds].panic

  suite("Cell Representation"){

    test("Cross is represented as 'X'") {
      assertEqual(playerString(Cross()), "X")
    }
    
    test("Nought is represented as 'O'") {
      assertEqual(playerString(Nought()), "O")
    }

  }

  suite("Game Board Initialization") {

    test("Board structure contains 9 small boards") {
      val game: GameBoard = generateNewBigBoard()
      assertEqual(game.bigBoard.size(), 9)
    }

    test("All small boards are initialized empty with correct size") {
      val game = generateNewBigBoard()
      game.bigBoard.foreach { board =>
        assertEqual(board.size(), 9)
        board.foreach { cell => assertEqual(cell, Empty())}
      }
    }

    test("Game state tracker (smallCopy) is initialized empty") {
      val game = generateNewBigBoard()
      assertEqual(game.smallCopy.size(), 9)
      game.smallCopy.foreach { cell => assertEqual(cell, Empty()) }
    }

  }

  suite("Board State Management"){

    test("Activation of small board updates both board and state tracker") {
      val boardIndex = 3
      var game = generateNewBigBoard()
      game = activateSmallBoard(game, boardIndex)

      // Verify state tracker
      assertEqual(game.smallCopy.get(boardIndex), Active())
      
      // Verify board cells
      game.bigBoard.get(boardIndex).foreach { cell =>
        assertEqual(cell, Active())
      }
    }

    test("Deactivation of small board restores empty state") {
      val boardIndex = 5
      var game = generateNewBigBoard()
      game = activateSmallBoard(game, boardIndex)
      game = deactivateSmallBoard(game, boardIndex)

      // Verify board cells restored to empty
      game.bigBoard.get(boardIndex).foreach { cell =>
        assertEqual(cell, Empty())
      }
      assertEqual(game.smallCopy.get(boardIndex), Empty())
    }
    
  }

  suite("Move Validation"){

    test("Valid moves are correctly identified"){
      val testCases = [
        (Empty(), true, "Empty cells are valid moves"),
        (Active(), true, "Active cells are valid moves"),
        (Cross(), false, "Occupied cells (Cross) are invalid moves"),
        (Nought(), false, "Occupied cells (Nought) are invalid moves")
      ]
      testCases.foreach { case (cell, expected, message) =>
        var board = fill(9, Empty())
        board = board.replace(0, cell)
        assertEqual(checkAvailableCell(board, 0), expected, message)
      }
    }

  }

  suite("Win Detection"){

    test("Win combinations are detected"){
      val winningPositions = [0, 1, 2] // Top row
      val board = winningPositions.createBoardWithMovesAtPositions(Cross())
      assertEqual(
        checkWinSituation(board, Cross()),
        Finish(true, Win(), Cross())
      )
    }

    test("Draw state is correctly identified") {
      val drawMoves = [
        Cross(), Nought(), Cross(),
        Nought(), Cross(), Nought(),
        Nought(), Cross(), Nought()
      ]
      val board = drawMoves.createBoardWithMoves()
      assertEqual(
        checkWinSituation(board, Cross()),
        Finish(true, Lose(), Cross())
      )
    }

    test("Ongoing game state is correctly identified") {
      val inProgressMoves = [
        Cross(), Empty(), Nought(),
        Empty(), Cross(), Empty(),
        Empty(), Empty(), Empty()
      ]
      val board = createBoardWithMoves(inProgressMoves)
      assertEqual(
        checkWinSituation(board, Cross()),
        Finish(false, Lose(), Cross())
      )
    }

  }


  suite("Computer Player Logic") {

    test("Turn determination is correct") {
      val testCases = [
        (Cross(), Cross(), true, "Computer plays as Cross on Cross turn"),
        (Cross(), Nought(), false, "Computer as Cross waits on Nought turn"),
        (Nought(), Nought(), true, "Computer plays as Nought on Nought turn"),
        (Nought(), Cross(), false, "Computer as Nought waits on Cross turn")
      ]

      testCases.foreach { case (computer, current, expected, message) =>
        assertEqual(isComputerTurn(current, computer), expected, message)
      }
    }

    test("Computer makes valid moves") {
      val board = fill(9, Empty())
      val move = computerPlay(board, Cross())
      
      assertEqual(move >= 0, move <= 8, "Move is within valid range")
      assertEqual(checkAvailableCell(board, move), true, "Selected cell is available")
    }
    
  }
  
  test("I need this test, to fix the possible Overload Error.") {
    assertEqual(5 > 3, true)
  }
}
