module src/lib

import io/console

import tty
import char
effect WrongInput(msg: String): Unit
effect ExitGame(): Nothing
effect PrintRules(): Unit

type GameMode {
  Local()
  Computer()
}

type Cell {
  Empty()
  Active()
  Nought()
  Cross()
  Draw()
  NewLine()
  Separator()
}

type WinBoard {
  Win()
  Lose()
  Nope()
}

type SmallBoard = List[Cell]
type BigBoard = List[SmallBoard]

record GameBoard(bigBoard: BigBoard, smallCopy: SmallBoard)

val winCombinations: List[List[Int]] = [[0,1,2], [3,4,5], [6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]


def playerString(player: Cell): String = {
  player match {
    case Cross() => "X"
    case Nought() => "O"
    case _ => ""
  }
}

def consoleInput(): Char = {
  with on[OutOfBounds].panic
  with console
  val input = do readLine()
  if (input.length() == 1) {
    charAt(input, 0)
  }else{
    ' '
  }
}

def parseDigit(c: Char): Int = {
  digitValue(c) match {
    case Some(value) => value
    case None() => 0
  }
}

def newLine(): Unit = {
  println("\n")
}