module src/Game

import tty
import io/console
import stream
import src/lib
import src/Render
import src/Generate


def playGame(): Unit = {
  // Returns the chosen Game Mode
  def chooseGameMode():  GameMode / {WrongInput, ExitGame, PrintRules} = {
    println("Choose the Game Mode:\n[1 - Local; 2 - vs Computer;  h - Read the rules; q - Exit the game]")
    val side = consoleInput()
    side match {
      case "1" => Local()
      case "2" => Computer()
      case "h" => do PrintRules(); chooseGameMode()
      case "q" => do ExitGame(); chooseGameMode()
      case _ =>
        do WrongInput("Invalid Game Mode. Please type '1' or '2'!")
        chooseGameMode()
    }
  }

  // Returns the Cell type for the side
  def chooseSide(): Cell / {WrongInput, ExitGame} = {
    println("Choose the side[X, O]:")
    val side = consoleInput()
    side match {
      case "X" => Cross()
      case "O" => Nought()
      case "q" => do ExitGame(); chooseSide()
      case _ =>
        do WrongInput("Invalid player type. Please type 'X' or 'O'!")
        chooseSide()
    }
  }


  // Returns the Small Board Number [0 - 8]
  def chooseSmallBoard(gameBoard: GameBoard): Int / {WrongInput} = {
    println("Choose the Small Board[1 - 9]:")
    val smallBoardNumber: String = consoleInput()

    if (not(any(Numbers) {s => s == smallBoardNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseSmallBoard(gameBoard)
    }
    else {
      with on[WrongFormat].panic
      val smallBoardNumber: Int = toInt(smallBoardNumber) - 1
      if (checkAvailableCell(gameBoard.smallCopy, smallBoardNumber)){
        smallBoardNumber
      }else {
        do WrongInput("This Small Board is Already occupied. Please type a number for a valid Small Board.")
        chooseSmallBoard(gameBoard)
      }
    }
  }

  // Returns the chosen Cell inside the board [0 - 8]
  def chooseCell(gameBoard: GameBoard, smallBoardNumber: Int): Int / {WrongInput} = {
    with on[OutOfBounds].panic

    println("Choose the cell inside your Small Board")
    val cellNumber: String = consoleInput()
    if (not(any(Numbers) {s => s == cellNumber})) {
      do WrongInput("Invalid input. Please type a number from 1 to 9.")
      chooseCell(gameBoard, smallBoardNumber)
    }else {
      with on[WrongFormat].panic
      val cellNumberInt = toInt(cellNumber) - 1

      if(checkAvailableCell(gameBoard.bigBoard.get(smallBoardNumber), cellNumberInt)){
        cellNumberInt
      }else{
        do WrongInput("This Cell is Already occupied. Please type a number for a valid cell.")
        chooseCell(gameBoard, smallBoardNumber)
      }
    }
  }

  // Core Game Loop
  def gameLoop(player: Cell, gameMode: GameMode): Unit / {WrongInput} = {
    var endGame: Bool = false

    var gameBoard: GameBoard = generateNewBigBoard()
    var currentSmallBoard: Int = 10
    var currentCell: Int = 10
    
    var computer: Cell = Cross()
    if (player is Cross()) computer = Nought()

    var currentPlayer: Cell = Cross()

    printGameScreen(gameBoard, player)

    println(playerString(currentPlayer) ++ " - You're starting the game!\nChoose the starting Small Board.")

    // INNER GAME LOOP OF ONE GAME
    while (not(endGame)){
      // Choose the new Small Board
      if (currentSmallBoard == 10) {
        if (gameMode is Computer()) {
          if (isComputerTurn(currentPlayer, computer)) currentSmallBoard = computerPlay(gameBoard.smallCopy, computer)
          else currentSmallBoard = chooseSmallBoard(gameBoard)
        }else currentSmallBoard = chooseSmallBoard(gameBoard)
        gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
      }

      // The Move Phase
      printGameScreen(gameBoard, currentPlayer)
      if (gameMode is Computer()) {
        with on[OutOfBounds].panic
        if (isComputerTurn(currentPlayer, computer)) currentCell = computerPlay(gameBoard.bigBoard.get(currentSmallBoard), computer)
        else currentCell = chooseCell(gameBoard, currentSmallBoard)
      }else currentCell = chooseCell(gameBoard, currentSmallBoard)

      gameBoard = checkNewCell(gameBoard, currentSmallBoard, currentCell, currentPlayer)
      with on[OutOfBounds].panic
      checkWinSituation(gameBoard.bigBoard.get(currentSmallBoard), currentPlayer) match {
        case Win() => {
          println("\nYou won the Small Board!")
          consoleInput()
          gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, currentPlayer)
        }
        case Lose() => {
          println("\n It's a draw in the Small Board!")
          consoleInput()
          gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, Draw())
        }
        case _ => ()
      }

      // After The Player's Move
      printGameScreen(gameBoard, currentPlayer)
      println("Excellent Move! Now Press the Enter to finish your turn.")
      consoleInput()

      // Change the Current Small Board
      if (checkAvailableCell(gameBoard.smallCopy, currentCell)){
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = currentCell
        gameBoard = newActiveSmallBoard(gameBoard, currentSmallBoard)
      } else {
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = 10
      }
      currentCell = 10

      // Verify if the game has been won

      checkWinSituation(gameBoard.smallCopy, currentPlayer) match {
        case Win() => {
          println(playerString(currentPlayer) ++ ", You won the game!")
          consoleInput()
          endGame = true
        }
        case Lose() => {
          println(playerString(currentPlayer) ++ ", You lost the game!")
          consoleInput()
          endGame = true
        }
        case _ => ()
      }
      // Change The Current Player
      if(currentPlayer is Cross()) currentPlayer = Nought()
      else currentPlayer = Cross()

      printGameScreen(gameBoard, currentPlayer)
      ()
    }
  }

  // MAIN SECTION

  // Greeting Message
  printWelcomeScreen()
  
  var play: Bool = true

  var player: Cell = Cross()

  var gameMode: GameMode = Local()
  while (play) {
    try{
      // Choosing a Game Mode
      gameMode = chooseGameMode()

      // Choosing a player side
      player = chooseSide()

      // Starting the game
      gameLoop(player, gameMode)

    } with WrongInput { msg =>
      println(msg)
      resume(())
    } with ExitGame {
      play = false
    } with PrintRules {
      printRules()
      resume(())
    }
  }
  printExitScreen()
}


def main(): Unit = {
  playGame()
}