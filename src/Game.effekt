module src/Game

import tty
import char
import io/console
import stream
import src/lib
import src/Render
import src/Generate
import src/Opponent


/*
 * Core Function of the Game
 * Input : None
 * Output : Unit
 */
def playGame(): Unit = {
  
  /*
   * Returns the chosen Game Mode
   * Input : None
   * Output : GameMode
   */
  def chooseGameMode():  GameMode / {WrongInput, ExitGame, PrintHelp} = {
    val validOptions = [
      ("1", "Local"),
      ("2", "vs Computer"),
      ("h", "Read rules"),
      ("q", "Exit game")
    ]
    val options: String = "[" ++ validOptions.map { e => e.first ++ " - " ++ e.second }
                                          .join(", ") ++ "]"

    println("Choose the Game Mode:\n" ++ options)
    val side = consoleInput()
    side match {
      case '1' => Local()
      case '2' => Computer()
      case 'h' => do PrintHelp(GameRules()); chooseGameMode()
      case 'q' => do ExitGame()
      case _ =>
        do WrongInput("Invalid Input!\nAvailable options: " ++ options ++ "\n")
        chooseGameMode()
    }
  }


  /*
   * Returns the Cell Type of the player
   * Input : None
   * Output : Cell
   */
  def chooseSide(): Cell / {WrongInput, ExitGame, PrintHelp} = {
    val validOptions = [
      ("X", "Cross"),
      ("O", "Nought"),
      ("h", "Read rules"),
      ("q", "Exit game")
    ]
    val options: String = "[" ++ validOptions.map { e => e.first ++ " - " ++ e.second }
                                          .join(", ") ++ "]"
    println("Choose the side:\n" ++ options)
    val side = consoleInput()
    side match {
      case 'X' => Cross()
      case 'O' => Nought()
      case 'h' => do PrintHelp(GameRules()); chooseSide()
      case 'q' => do ExitGame()
      case _ =>
        do WrongInput("Invalid input!\n Available options: " ++ options ++ "\n")
        chooseSide()
    }
  }


  /*
   * Returns the Small Board Number
   * Input : gameBoard: GameBoard
   * Output : Int [0 - 8]
   */
  def chooseSmallBoard(gameBoard: GameBoard): Int / {WrongInput, PrintHelp, ExitGame} = {
    println("Choose the Small Board:\n[h - help, q - exit]")
    val input: Char = consoleInput()

    input match { 
      case 'q' => do ExitGame()
      case 'h' => do PrintHelp(Board()); chooseSmallBoard(gameBoard)
      case _ =>
      if (isDigit(input)) {
        with on[WrongFormat].panic
        val smallBoardNumber: Int = digitValue(input).getOrElse{ 20 } - 1
        if (checkAvailableCell(gameBoard.smallCopy, smallBoardNumber)){
          smallBoardNumber
        }else {
          do WrongInput("This Small Board is Already occupied. Please type a number for a valid Small Board.")
          chooseSmallBoard(gameBoard)
        }
      }
      else {
        do WrongInput("Invalid input. Please type a digit from 1 to 9.")
        chooseSmallBoard(gameBoard)
      }
    }
  }


  /*
   * Returns the chosen Cell inside the board
   * Input : gameBoard: GameBoard
   * Output : Int [0 - 8]
   */
  def chooseCell(gameBoard: GameBoard, smallBoardNumber: Int): Int / {WrongInput, PrintHelp, ExitGame} = {
    with on[OutOfBounds].panic

    println("Choose the cell inside the chosen Small Board:\n[h - help, q - exit]")
    val input: Char = consoleInput()

    input match {
      case 'q' => do ExitGame()
      case 'h' => do PrintHelp(Board()); chooseCell(gameBoard, smallBoardNumber)
      case _ =>
        if (isDigit(input)) {
          with on[WrongFormat].panic
          val cellNumber: Int = digitValue(input).getOrElse {20} - 1
          if(checkAvailableCell(gameBoard.bigBoard.get(smallBoardNumber), cellNumber)){
            cellNumber
        }else{
          do WrongInput("This Cell is Already occupied. Please type a number for a valid cell.")
          chooseCell(gameBoard, smallBoardNumber)
        }
        }else {
          do WrongInput("Invalid input. Please type a number from 1 to 9.")
          chooseCell(gameBoard, smallBoardNumber)
        }
    }

}


  /*
   * Core Game Loop
   * Input : player: Cell, gameMode: GameMode
   * Output : Unit
   */
  def gameLoop(player: Cell, gameMode: GameMode): Unit / {WrongInput, PrintHelp, ExitGame} = {
    var endGame: Bool = false

    var gameBoard: GameBoard = generateNewBigBoard()
    var currentSmallBoard: Int = 10
    var currentCell: Int = 10
    
    var computer: Cell = Cross()
    if (player is Cross()) computer = Nought()

    var currentPlayer: Cell = Cross()

    printGameScreen(gameBoard, player)

    println(playerString(currentPlayer) ++ " - You're starting the game!\nChoose the starting Small Board.")

    // INNER GAME LOOP OF ONE GAME
    while (not(endGame)){
      with on[OutOfBounds].panic
      // Choose the new Small Board
      if (currentSmallBoard == 10) {
        if (gameMode is Computer()) {
          if (isComputerTurn(currentPlayer, computer)) currentSmallBoard = computerPlay(gameBoard.smallCopy, computer)
          else currentSmallBoard = chooseSmallBoard(gameBoard)
        }else currentSmallBoard = chooseSmallBoard(gameBoard)
        gameBoard = activateSmallBoard(gameBoard, currentSmallBoard)
      }

      // The Move Phase
      printGameScreen(gameBoard, currentPlayer)
      if (gameMode is Computer()) {
        if (isComputerTurn(currentPlayer, computer)) currentCell = computerPlay(gameBoard.bigBoard.get(currentSmallBoard), computer)
        else currentCell = chooseCell(gameBoard, currentSmallBoard)
      }else currentCell = chooseCell(gameBoard, currentSmallBoard)

      gameBoard = checkNewCell(gameBoard, currentSmallBoard, currentCell, currentPlayer)

      // val finish = checkWinSituation(gameBoard.bigBoard.get(currentSmallBoard), currentPlayer) match {
      val finish: Finish = checkWinSituation(gameBoard.bigBoard.get(currentSmallBoard), currentPlayer)
      if (finish.isFinished) {
        finish.state match {
          case Win() => {
            println("\nYou won the Small Board!")
            gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, currentPlayer)
          }
          case Lose() => {
            println("\n It's a draw in the Small Board!")
            gameBoard = fillWinningGameBoard(gameBoard, currentSmallBoard, Draw())
          }
        }
        consoleInput()
        ()
      }

      // After The Player's Move

      // Change the Current Small Board
      if (checkAvailableCell(gameBoard.smallCopy, currentCell)){
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = currentCell
        gameBoard = activateSmallBoard(gameBoard, currentSmallBoard)
      } else {
        gameBoard = deactivateSmallBoard(gameBoard, currentSmallBoard)
        currentSmallBoard = 10
      }
      currentCell = 10

      // Verify if the game has been won
      val finishGame: Finish = checkWinSituation(gameBoard.smallCopy, currentPlayer)
      if (finishGame.isFinished) {
        finishGame.state match {
          case Win() => println(playerString(currentPlayer) ++ ", You won the game!")
          case Lose() => println(playerString(currentPlayer) ++ ", You lost the game!")
        }
        consoleInput()
        endGame = true
      }
      // Change The Current Player
      if(currentPlayer is Cross()) currentPlayer = Nought()
      else currentPlayer = Cross()

      printGameScreen(gameBoard, currentPlayer)
    }
  }

  // MAIN SECTION
  // Greeting Message
  printWelcomeScreen()
  
  var play = true

  var gameMode: GameMode = Local()
  while (play) {
    try{
      // Starting the game
      gameLoop(chooseSide(), chooseGameMode())
    } with WrongInput { msg =>
      println(msg)
      resume(())
    } with ExitGame {
      play = false
    } with PrintHelp { rule => rule match {
        case GameRules() => printRules()
        case Board() => printBoard()
      }
      resume(())
    }
  }
  printExitScreen()
}


def main(): Unit = {
  playGame()
}