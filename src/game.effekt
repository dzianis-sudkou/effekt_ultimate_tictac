module game

import List
import effekt

// Data types
type Player {X(); O()}

type Cell = String

// Board 3x3
type SmallBoard = List[List[Cell]]

// Entire 9x9 board

type BigBoard = List[List[SmallBoard]]

record Position(row: Int, col: Int)

record GameState(
  board: BigBoard,
  currentPlayer: Player,
  activeBoard: Option[Position] // The small board that the current player must play in, None means any board is valid
)

// // Effects
// effect GetPlayerMove(state: GameState): Position
// effect DisplayBoard(board: BigBoard): Unit
// effect AnnounceWinner(winner: Option[Player]): Unit
// effect Error(msg: String): Nothing


// // Function to create an Empty SmallBoard
// def emptySmallBoard(): List[List[Cell]] = {
//   val smallBoard: List[List[Cell]] = [
//     ["X", "X", "X"],
//     ["X", "X", "X"],
//     ["X", "X", "X"]
//     ]
//   smallBoard
// }

// def emptyBigBoard(): List[List[SmallBoard]] = {
//   val bigBoard: List[List[SmallBoard]] = [
//     [emptySmallBoard(), emptySmallBoard(), emptySmallBoard()],
//     [emptySmallBoard(), emptySmallBoard(), emptySmallBoard()],
//     [emptySmallBoard(), emptySmallBoard(), emptySmallBoard()]
//     ]
//   bigBoard
// }

// def printList(list: List[String]): Unit = list match {
//     case Nil() => ()
//     case Cons(head, tail) => {
//       println(head)
//       printList(tail)
//     }
//   }
def main(): Unit = {
  val myList: List[String] = fill(3, "X")
  ()
}
